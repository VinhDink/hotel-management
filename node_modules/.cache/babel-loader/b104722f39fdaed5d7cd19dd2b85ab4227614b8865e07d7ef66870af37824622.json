{"ast":null,"code":"export default {\n  name: \"ResetPasswordView\",\n  setup() {\n    const email = ref(\"\");\n    const password = ref(\"\");\n    const confirm_password = ref(\"\");\n    const isPending = ref(false);\n    const resetPassword = async e => {\n      e.preventDefault();\n      isPending.value = true;\n      try {\n        const res = await axios.post(\"/reset-password\", {\n          email: email.value,\n          password: password.value,\n          confirm_password: confirm_password.value\n        });\n        if (res.status === 200) {\n          alert(\"Password reset successfully\");\n          window.location.href = \"/login\";\n        }\n      } catch (err) {\n        alert(err.response.data.message);\n      }\n      isPending.value = false;\n    };\n    return {\n      email,\n      password,\n      confirm_password,\n      isPending,\n      resetPassword\n    };\n  }\n};","map":{"version":3,"names":["name","setup","email","ref","password","confirm_password","isPending","resetPassword","e","preventDefault","value","res","axios","post","status","alert","window","location","href","err","response","data","message"],"sources":["/Users/vinh/Documents/Kiai/abc_hotel/src/views/ResetPasswordView.vue"],"sourcesContent":["<template>\n    <form >\n        <h2>Reset Password</h2>\n        <div>\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n        <div>\n            <label for=\"password\">New Password</label>\n            <input type=\"password\" id=\"password\" name=\"password\" required>\n        </div>\n        <div>\n            <label for=\"confirm-password\">Confirm Password</label>\n            <input type=\"password\" id=\"confirm-password\" name=\"confirm-password\" required>\n        </div>\n        <div>\n            <input type=\"hidden\" name=\"token\" value=\"{{ htmlspecialchars($token) }}\">\n        </div>\n        <button type=\"submit\">Reset Password</button>\n    </form>\n</template>\n\n<script>\nexport default {\n    name: \"ResetPasswordView\",\n\n    setup() {\n        const email = ref(\"\");\n        const password = ref(\"\");\n        const confirm_password = ref(\"\");\n\n        const isPending = ref(false);\n\n        const resetPassword = async (e) => {\n            e.preventDefault();\n            isPending.value = true;\n\n            try {\n                const res = await axios.post(\"/reset-password\", {\n                    email: email.value,\n                    password: password.value,\n                    confirm_password: confirm_password.value,\n                });\n\n                if (res.status === 200) {\n                    alert(\"Password reset successfully\");\n                    window.location.href = \"/login\";\n                }\n            } catch (err) {\n                alert(err.response.data.message);\n            }\n\n            isPending.value = false;\n        };\n\n        return {\n            email,\n            password,\n            confirm_password,\n            isPending,\n            resetPassword,\n        };\n    },\n    }\n\n</script>\n\n<style scoped>\nform {\n    width: 500px;\n    margin: auto;\n    padding: 20px;\n    border: 0.5px solid black;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n}\n\nh2 {\n    text-align: center;\n    font-weight: bold;\n}\n\ndiv {\n    margin-bottom: 10px;\n}\n\nlabel {\n    display: block;\n}\n\ninput[type=\"email\"],\ninput[type=\"password\"] {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ddd;\n}\n\nbutton[type=\"submit\"] {\n    display: block;\n    width: 100%;\n    padding: 10px;\n    background-color: rgb(258, 187, 0);\n    color: white;\n    border: none;\n    cursor: pointer;\n}\n</style>"],"mappings":"AAuBA,eAAe;EACXA,IAAI,EAAE,mBAAmB;EAEzBC,KAAKA,CAAA,EAAG;IACJ,MAAMC,KAAI,GAAIC,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMC,QAAO,GAAID,GAAG,CAAC,EAAE,CAAC;IACxB,MAAME,gBAAe,GAAIF,GAAG,CAAC,EAAE,CAAC;IAEhC,MAAMG,SAAQ,GAAIH,GAAG,CAAC,KAAK,CAAC;IAE5B,MAAMI,aAAY,GAAI,MAAOC,CAAC,IAAK;MAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;MAClBH,SAAS,CAACI,KAAI,GAAI,IAAI;MAEtB,IAAI;QACA,MAAMC,GAAE,GAAI,MAAMC,KAAK,CAACC,IAAI,CAAC,iBAAiB,EAAE;UAC5CX,KAAK,EAAEA,KAAK,CAACQ,KAAK;UAClBN,QAAQ,EAAEA,QAAQ,CAACM,KAAK;UACxBL,gBAAgB,EAAEA,gBAAgB,CAACK;QACvC,CAAC,CAAC;QAEF,IAAIC,GAAG,CAACG,MAAK,KAAM,GAAG,EAAE;UACpBC,KAAK,CAAC,6BAA6B,CAAC;UACpCC,MAAM,CAACC,QAAQ,CAACC,IAAG,GAAI,QAAQ;QACnC;MACJ,EAAE,OAAOC,GAAG,EAAE;QACVJ,KAAK,CAACI,GAAG,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAC;MACpC;MAEAhB,SAAS,CAACI,KAAI,GAAI,KAAK;IAC3B,CAAC;IAED,OAAO;MACHR,KAAK;MACLE,QAAQ;MACRC,gBAAgB;MAChBC,SAAS;MACTC;IACJ,CAAC;EACL;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}